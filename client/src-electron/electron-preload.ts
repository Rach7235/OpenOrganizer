/**
 * This file is used specifically for security reasons.
 * Here you can access Nodejs stuff and inject functionality into
 * the renderer thread (accessible there through the "window" object)
 *
 * WARNING!
 * If you import anything from node_modules, then make sure that the package is specified
 * in package.json > dependencies and NOT in devDependencies
 *
 * Example (injects window.myAPI.doAThing() into renderer thread):
 *
 *   import { contextBridge } from 'electron'
 *
 *   contextBridge.exposeInMainWorld('myAPI', {
 *     doAThing: () => {}
 *   })
 *
 * WARNING!
 * If accessing Node functionality (like importing @electron/remote) then in your
 * electron-main.ts you will need to set the following when you instantiate BrowserWindow:
 *
 * mainWindow = new BrowserWindow({
 *   // ...
 *   webPreferences: {
 *     // ...
 *     sandbox: false // <-- to be able to import @electron/remote in preload script
 *   }
 * }
 *
 * This file was automatically generated by Quasar.
 *
 * Authors: Kevin Sirantoine, Rachel Patella, Maria Pasaylo
 * Created: 2025-04-13
 * Updated: 2025-10-14
 *
 * This file exposes APIs to the renderer via the contextBridge.
 *
 *
 * This file is a part of OpenOrganizer.
 * This file and all source code within it are governed by the copyright and license terms outlined in the LICENSE file located in the top-level directory of this distribution.
 * No part of OpenOrganizer, including this file, may be reproduced, modified, distributed, or otherwise used except in accordance with the terms specified in the LICENSE file.
 **/
import { contextBridge, ipcRenderer } from 'electron';
import type {
  Note,
  Extension,
  Folder,
  Reminder,
  DailyReminder,
  WeeklyReminder,
  MonthlyReminder,
  YearlyReminder
} from "app/src-electron/types/shared-types";

contextBridge.exposeInMainWorld('sqliteAPI', {
  createNote: (newNote: Note) => ipcRenderer.invoke('createNote', newNote),
  createReminder: (newRem: Reminder) => ipcRenderer.invoke('createReminder', newRem),
  createDailyReminder: (newDailyRem: DailyReminder) => ipcRenderer.invoke('createDailyReminder', newDailyRem),
  createWeeklyReminder: (newWeeklyRem: WeeklyReminder) => ipcRenderer.invoke('createWeeklyReminder', newWeeklyRem),
  createMonthlyReminder: (newMonthlyRem: MonthlyReminder) => ipcRenderer.invoke('createMonthlyReminder', newMonthlyRem),
  createYearlyReminder: (newYearlyRem: YearlyReminder) => ipcRenderer.invoke('createYearlyReminder', newYearlyRem),
  createExtension: (newExt: Extension) => ipcRenderer.invoke('createExtension', newExt),
  createFolder: (newFolder: Folder) => ipcRenderer.invoke('createFolder', newFolder),

  // Example functions
  sqliteCreate: (key: string, value: string) => ipcRenderer.invoke('sqliteCreate', key, value),
  sqliteRead: (key: string) => ipcRenderer.invoke('sqliteRead', key),
  sqliteUpdate: (key: string, value: string) => ipcRenderer.invoke('sqliteUpdate', key, value),
  sqliteDelete: (key: string) => ipcRenderer.invoke('sqliteDelete', key),
});

contextBridge.exposeInMainWorld('electronStoreAPI', {
  getStoreName: () => ipcRenderer.invoke('getStoreName'),
  setStoreName: (name: string) => ipcRenderer.invoke('setStoreName', name)
});


