/*
 * Authors: Michael Jagiello
 * Created: 2025-09-20
 * Updated: 2025-10-18
 *
 * This file declares const values and defines functions for SQL statements to store and retrieve from the database.
 *
 * This file is a part of OpenOrganizer.
 * This file and all source code within it are governed by the copyright and license terms outlined in the LICENSE file located in the top-level directory of this distribution.
 * No part of OpenOrganizer, including this file, may be reproduced, modified, distributed, or otherwise used except in accordance with the terms specified in the LICENSE file.
 */

package db

const createTableUsers = `
CREATE TABLE IF NOT EXISTS users (
	username CHAR(32),
	userID BIGINT GENERATED BY DEFAULT AS IDENTITY,
	lastUpdated BIGINT,
	lastLogin BIGINT,
	passwordHashHash BYTEA,
	salt INT,
	encrPrivateKey BYTEA,
	encrPrivateKey2 BYTEA,
	PRIMARY KEY(username)
);`

const createTableTokens = `
CREATE TABLE IF NOT EXISTS tokens (
	userID BIGINT,
	creationTime BIGINT,
	expirationTime BIGINT,
	authToken BYTEA,
	PRIMARY KEY(userID, creationTime)
);`

const createTableLastUpdated = `
CREATE TABLE IF NOT EXISTS last_updated (
	userID BIGINT,
	lastUpNotes BIGINT,
	lastUpReminders BIGINT,
	lastUpDaily BIGINT,
	lastUpWeekly BIGINT,
	lastUpMonthly BIGINT,
	lastUpYearly BIGINT,
	lastUpExtensions BIGINT,
	lastUpOverrides BIGINT,
	lastUpFolders BIGINT,
	lastUpDeleted BIGINT,
	PRIMARY KEY(userID)
);`

func createTableItems(tableName string) string {
	return `
CREATE TABLE IF NOT EXISTS ` + tableName + ` (
	userID BIGINT,
	itemID BIGINT,
	lastModified BIGINT,
	lastUpdated BIGINT,
	encryptedData BYTEA,
	PRIMARY KEY(userID, itemID)
);
`
}

const createTableExtensions = `
CREATE TABLE IF NOT EXISTS extensions (
	userID BIGINT,
	itemID BIGINT,
	lastModified BIGINT,
	lastUpdated BIGINT,
	sequenceNum INT,
	encryptedData BYTEA,
	PRIMARY KEY(userID, itemID, sequenceNum)
);`

const createTableOverrides = `
CREATE TABLE IF NOT EXISTS overrides (
	userID BIGINT,
	itemID BIGINT,
	lastModified BIGINT,
	lastUpdated BIGINT,
	linkedItemID BIGINT,
	encryptedData BYTEA,
	PRIMARY KEY(userID, itemID)
);`

const createTableFolders = `
CREATE TABLE IF NOT EXISTS folders (
	userID BIGINT,
	folderID BIGINT,
	lastModified BIGINT,
	lastUpdated BIGINT,
	encryptedData BYTEA,
	PRIMARY KEY(userID, folderID)
);`

const createTableDeleted = `
CREATE TABLE IF NOT EXISTS deleted (
	userID BIGINT,
	itemID BIGINT,
	lastModified BIGINT,
	lastUpdated BIGINT,
	itemTable SMALLINT,
	PRIMARY KEY(userID, itemID)
);`

const dropAllAuth = `
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS tokens;
DROP TABLE IF EXISTS last_updated;
`

const dropAllData = `
DROP TABLE IF EXISTS notes;
DROP TABLE IF EXISTS reminders;
DROP TABLE IF EXISTS daily_reminders;
DROP TABLE IF EXISTS weekly_reminders;
DROP TABLE IF EXISTS monthly_reminders;
DROP TABLE IF EXISTS yearly_reminders;
DROP TABLE IF EXISTS extensions;
DROP TABLE IF EXISTS overrides;
DROP TABLE IF EXISTS folders;
DROP TABLE IF EXISTS deleted;
`

// users

const usersCreate = `
INSERT INTO users (username, lastUpdated, lastLogin, passwordHashHash, salt, encrPrivateKey, encrPrivateKey2) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING userID;
`

const usersCreateManualID = `
INSERT INTO users VALUES ($1, $2, $3, $4, $5, $6, $7, $8);
`

const usersRead = `
SELECT * FROM users WHERE username = $1;
`

const usersUpdate = `
UPDATE users 
SET username = $2, lastUpdated = $3, lastLogin = $4, passwordHashHash = $5, salt = $6, encrPrivateKey = $7, encrPrivateKey2 = $8 
WHERE username = $1
RETURNING userID;
`

const usersUpdateLastLogin = `
UPDATE users SET lastLogin = $2 WHERE username = $1;
`

const usersDelete = `
DELETE FROM users WHERE username = $1;
`

// tokens

const tokensCreate = `
INSERT INTO tokens VALUES ($1, $2, $3, $4);
`

const tokensReadExpiration = `
SELECT expirationTime FROM tokens WHERE userID = $1 AND authToken = $2;
`

const tokensUpdateExpiration = `
UPDATE tokens SET expirationTime = $2 WHERE userID = $1;
`

const tokensDeleteAllFromUser = `
DELETE FROM tokens WHERE userID = $1;
`

const tokensDeleteExpiredByTime = `
DELETE FROM tokens WHERE expirationTime < $1;
`

// last updated

const lastupCreate = `
INSERT INTO last_updated VALUES ($1, $2, $2, $2, $2, $2, $2, $2, $2, $2, $2);
`

const lastupRead = `
SELECT * FROM last_updated WHERE userID = $1;
`

const lastupUpdate = `
UPDATE last_updated 
SET lastUpNotes = $2, lastUpReminder = $3, lastUpDaily = $4, lastUpWeekly = $5, lastUpMonthly = $6, 
lastUpYearly = $7, lastUpExtensions = $8, lastUpOverrides = $9, lastUpFolders = $10, lastUpDeleted = $11
WHERE userID = $1;
`

const lastupDelete = `
DELETE FROM last_updated WHERE userID = $1;
`

// syncup

func insertItem(tableName string) string {
	return `
INSERT INTO ` + tableName + ` (userID, itemID, lastModified, lastUpdated, encryptedData)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (userID, itemID) DO UPDATE
SET lastModified = $3, lastUpdated = $4, encryptedData = $5
WHERE ` + tableName + `.lastModified < $3
RETURNING *;
`
}

// syncdown of any table for a given user and within a time frame
func getRows(tableName string) string {
	return `
SELECT * FROM ` + tableName + ` WHERE userID = $1 AND lastUpdated >= $2 AND lastUpdated <= $3;
`
}
